package com.example.quizapp

import android.content.Context
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.booleanPreferencesKey
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.intPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

val Context.dataStore by preferencesDataStore(name = "quiz_preferences")

class SettingsDataStore(private val context: Context) {

    companion object {
        private val TIMER_ENABLED_KEY = booleanPreferencesKey("timer_enabled")
        private val LIGHT_THEME_KEY = booleanPreferencesKey("light_theme")
        private val HIGH_SCORE_KEY = intPreferencesKey("high_score")
    }

    val isLightTheme: Flow<Boolean> = context.dataStore.data
        .map { preferences ->
            preferences[LIGHT_THEME_KEY] ?: true // Default to light theme
        }

    val highScore: Flow<Int> = context.dataStore.data
        .map { preferences ->
            preferences[HIGH_SCORE_KEY] ?: 0
        }

    suspend fun saveLightTheme(isLight: Boolean) {
        context.dataStore.edit { preferences ->
            preferences[LIGHT_THEME_KEY] = isLight
        }
    }

    suspend fun saveHighScore(score: Int) {
        context.dataStore.edit { preferences ->
            preferences[HIGH_SCORE_KEY] = score
        }
    }

    val isTimerEnabled: Flow<Boolean> = context.dataStore.data
        .map { preferences ->
            preferences[TIMER_ENABLED_KEY] ?: false // Default to timer off
        }

    suspend fun saveTimerState(isEnabled: Boolean) {
        context.dataStore.edit { preferences ->
            preferences[TIMER_ENABLED_KEY] = isEnabled
        }
    }
}
